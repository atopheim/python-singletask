name: Auto Tag from pyproject.toml

on:
  push:
    branches:
      - main  # or whichever branch you want to tag from

jobs:
  tag-from-pyproject:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"  # or your preferred version

      - name: Parse version from pyproject.toml
        id: get_version
        run: |
          # If you're on Python 3.11+, you can use `import tomllib`
          # If on older Python, install tomli, or adjust accordingly
          echo "Python version: $(python --version)"

          python <<EOF > version.txt
import sys

try:
    import tomllib  # Python 3.11+
except ImportError:
    import subprocess
    subprocess.run([sys.executable, "-m", "pip", "install", "tomli"], check=True)
    import tomli as tomllib

with open("pyproject.toml", "rb") as f:
    data = tomllib.load(f)

version = data["project"]["version"]
print(version)
EOF

          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION"
          # Modern way to set output in GitHub Actions:
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Discovered version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "No version found in pyproject.toml!"
            exit 1
          fi

          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists. Doing nothing."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "Pushed tag v$VERSION"
          fi
